ideias
*******************************************************************************
                        1 DIA
*******************************************************************************
Afiando o Machado
Instalação Python 3.8
VSCODE
GIT
python -V

import this

Fundamentos procedurais:
int
operações +, -, *, /, //(retorna inteiro da divisão), %(modulo), ** (potenciação)
float
Variaveis
type()
NOT, OR, AND
If XXX :

*******************************************************************************
                        2 DIA
*******************************************************************************

String, ', ", ''', """
print()
dir()
.lower
.upper
help("".lower)
.len("")
__gt__ - Dunder - “Double Under (Underscores)”
2 + "2" => error TypeError - fortemente tipado (exceto int para float)
2+2=4
"2"+"2" = 22 Concatenação
cast - str(), int(), float()
str(2qwe) = erro (não faz sentido)

Container (string acessada como vetor)
"qweasd"[1] = "w" (começa a contagem do zero)
"qweasd"[-1] = "d" (negativo conta do fim p o começo)
"qweasd"[2:4] = "ea" (intervalo fechado a esquerda do : e intervalo aberto depois: )
"qweasd"[0:4:2] = "qe" (Pula o passo de seleção depois do segundo : )
"qweasd"[::2] = "qes" (Todos os caracteres pares da string )
"qweasd"[1::2] = "wad" (Todos os caracteres impares da string )
"qweasd"[::] = "qweasd" (Todos os caracteres pares da string )
"qweasd"[::-1] = "dsaewq" (inverte string )
'qwe'*3 => 'qweqweqwe'

Definição de listas
lista=[]
type(lista)
len(lista)
dir(lista)
lista.append(1)
lista.reverse()
numeros = list(range(10)) =>[0,1,2,3,4,5,6,7,8,9]
numeros[0]=>0
numeros[-1]=>9
numeros[:5]=>[0,1,2,3,4]
numeros[::-2]=>[9,7,5,3,1]
numeros + [10,11,12]=>[0,1,2,3,4,5,6,7,8,9],10,11,12

list(range(1,10)) =>[1,2,3,4,5,6,7,8,9]
list(range(1,10,2)) =>[1,,3,,5,,7,,9]

tupla = (1,2,3) lista imutavel
tupla = 1,2,3
p,s,t = tupla (desempacotamento)
p=>1
s=>2
t=>3
p,s,t,q = tupla => erro
p,demais = tupla 
p=>1
demais = [2,3]

L1, L2, L3, *_ = "qweasd"
L1="q"
L2= "w"
L3= "e"

for letra in "qweasd":
    print(letra)

dicionario = {'br':'Brasil','fr':'França'}
dicionario['br'] = 'Brasil'
dicionario.get('br') = 'Brasil'

dicionario['en']='Ingles'
len(dicionario) =>3

for lingua in dicionario:
    print(lingua)
br
fr  (Lista as chaves)
en

for chave in dicionario: print(chave, dicionario[chave],sep='->')
br -> Brasil
fr -> França 
en -> Ingles

for chave in dicionario.keys(): print(chave, dicionario[chave],sep='->')
br -> Brasil
fr -> França 
en -> Ingles

for itens in dicionario.itens(): print(itens)
(br,Brasil)
(fr,França) 
(en,Ingles)

for pais, lingua in dicionario.itens(): print(pais, lingua ,sep='->')
br -> Brasil
fr -> França 
en -> Ingles

Funções
para criar uma função mas nao tem nada dentro dela
def sem_retorno():
    pass

sem passagem de parametros e sem retorno de parametros
def imprimir():
    print("Inicio")
    print("final")

type(imprimir) => function

passando parametros e sem retorno de parametros
def soma(a,b):
    print(a+b)

passando parametros e retornando parametros
def soma(a,b):
    return a+b

nao sei qnts elementos eu vou passar p função
def soma(*numeros):
    type(numeros)=> tupla

soma(1,2,3,4)

def soma(*numeros):
    total=0
    for numero in numeros:
        total = total + numero
    return total

t1=(1,2)
t2=(1,2)
t1==t2 => True

id(t1) == id(t2) =>False
t1 is t2 =>False

modulo (é um arquivo .py com scripts python)
pacote (é um diretorio com um modulo especial __init__.py )
************************************************************
criando um modulo pythonico:
dir pacote
file modulo.py

def soma(*args):
    total=0
    for n in args:
        total += n
    return total

print (__name__)


Usar esta estrutura para controlar qnd é roda o file no 
modulo ou chamado em outra função . Legal p demonstrar
codigo TESTES na AULA

if __name__ == '__main__':
    print(soma())
    print(soma(1))
    print(soma(1,2))
    print(soma(1,2,3))
    print(soma(1,2,3,4))

**************************************************************
Executando...
python .\pacote\modulo.py
python -m pacote.modulo

**************************************************************
debug e git (ENSINE SEMPRE NA PRIMEIRA AULA DEBUG é VIDA)

**************************************************************
importando o modulo:



from pacote.modulo import soma as s

print(s(7,8))


*******************************************************************************
                        3 DIA - ORIENTACAO A OBJETOS
*******************************************************************************
Teste automatico de SW - Construir programas p testar outros programas
unitest - padrao python
pytest - bom

exemplo do teste para o modulo

Uma classe é uma forma de gelo.








